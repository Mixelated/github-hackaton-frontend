{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/components/DeveloperConsole.js","AccountSelector.js","BlockNumber.js","CurrentBlock.js","Metadata.js","NodeInfo.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","DeveloperConsole","util","utilCrypto","Main","setAccountAddress","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","length","useEffect","Menu","attached","tabular","style","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","alignItems","target","rel","href","Button","basic","circular","color","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","query","system","balance","data","free","toHuman","unsub","catch","Label","pointing","Icon","AccountSelector","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","unsubscribeAll","number","toNumber","timer","time","id","setInterval","clearInterval","Grid","Column","Card","Content","textAlign","Statistic","label","extra","BlockNumber","CurrentBlock","bn","setBn","bh","setBh","ph","setPh","er","setEr","recursiveBlock","getHeader","latestBlock","hash","parentHash","extrinsicsRoot","fontWeight","toString","version","metadata","setMetadata","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","Metadata","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","NodeInfo","accountAddress","loader","getPair","Dimmer","active","Loader","centered","columns","padded","Message","negative","compact","floating","header","content","contextRef","createRef","ref","Sticky","context","stackable","Row","stretched","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1fc2fe5.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n          <BalanceAnnotation accountSelected={accountSelected} />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman());\n      })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n\n  return accountSelected ? (\n    <Label pointing='left'>\n      <Icon name='money' color='green' />\n      {accountBalance}\n    </Label>\n  ) : null;\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  return api.derive &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.derive.chain.bestNumberFinalized ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useState } from 'react';\nimport { useSubstrate } from './substrate-lib';\n\nfunction CurrentBlock(){\n    const { api } = useSubstrate();\n    const [bn, setBn] = useState('');\n    const [bh, setBh] = useState('');\n    const [ph, setPh] = useState('');\n    const [er, setEr] = useState('');\n\n    const recursiveBlock = async () => {\n        const latestBlock = await api.rpc.chain.getHeader()\n        setBn(latestBlock.number)\n        setBh(latestBlock.hash)\n        setPh(latestBlock.parentHash)\n        setEr(latestBlock.extrinsicsRoot)\n        recursiveBlock()\n    }\n    recursiveBlock()\n\n    return (\n        <div>\n        <h3>Current Block Info</h3>\n        <table>\n            <tbody>\n            <tr> \n                <td>\n                Parent Hash \n                </td>\n                <td style={{fontWeight: 600}}>{ph.toString()}</td>\n            </tr>\n            <tr> \n                <td>\n                Block Number \n                </td>\n                <td style={{fontWeight: 600}}>{bn.toString()}</td>\n            </tr>\n            <tr> \n                <td>\n                Block Hash \n                </td>\n                <td style={{fontWeight: 600}}>{bh.toString()}</td>\n            </tr>\n            <tr> \n                <td>\n                Extrinsics Root \n                </td>\n                <td style={{fontWeight: 600}}>{er.toString()}</td>\n            </tr>\n            </tbody>\n        </table>\n        </div>\n    );\n}\n\nexport default CurrentBlock;","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta>\n            <span>v{metadata.version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata.data, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport Balances from './Balances';\nimport BlockNumber from './BlockNumber';\nimport CurrentBlock from './CurrentBlock'\nimport Events from './Events';\nimport Interactor from './Interactor';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Transfer from './Transfer';\nimport Upgrade from './Upgrade';\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${err}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n          <Grid.Row>\n            <CurrentBlock/>\n          </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}